{"version":3,"sources":["components/LeftPanel.jsx","components/TableForPresent.jsx","components/TableForQuiting.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["DataWrapper","styled","div","PatientInfoWrapper","StyledButton","Button","LeftPanel","data","icon","LeftOutlined","firstName","differenceInCalendarYears","Date","now","parseISO","birthDate","diagnosis","StyledTable","table","StyledTd","td","StyledTr","tr","TableForPresent","choosePatient","map","item","index","key","historyNumber","onClick","bedNumber","TableForQuiting","cause","TabPane","Tabs","Wrapper","LeftPanelWrapper","RightPanelWrapper","App","props","loadMedData","a","config","headers","axios","get","present","setState","message","error","console","log","quiting","patient","active","state","this","defaultActiveKey","tab","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.85f544cc.chunk.js","sourcesContent":["import React from 'react';\nimport parseISO from 'date-fns/parseISO';\nimport differenceInCalendarYears from 'date-fns/differenceInCalendarYears';\nimport styled from 'styled-components';\nimport { LeftOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst DataWrapper = styled.div`\n  padding-top: 20px;\n`;\n\nconst PatientInfoWrapper = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  background-color: lightblue;\n  font-size: 36px;\n`;\nconst StyledButton = styled(Button)`\n  align-self: center;\n  background-color: inherit;\n  border: none;\n  margin-right: 10px;\n`;\nfunction LeftPanel({ data }) {\n  return (\n    <div>\n      <PatientInfoWrapper>\n        <div>Информация о пациенте</div>\n        <StyledButton icon={<LeftOutlined />} />\n      </PatientInfoWrapper>\n      <DataWrapper>\n        {data.firstName ? (\n          <>\n            <p>ФИО: {data.firstName}</p>\n            <p>Возраст: {differenceInCalendarYears(Date.now(), parseISO(data.birthDate))}</p>\n            <p>Диагноз: {data.diagnosis}</p>\n          </>\n        ) : (\n          'Информация отсутствует'\n        )}\n      </DataWrapper>\n    </div>\n  );\n}\nLeftPanel.propTypes = {\n  data: PropTypes.shape({\n    firstName: PropTypes.string.isRequired,\n    birthDate: PropTypes.string.isRequired,\n    diagnosis: PropTypes.string.isRequired,\n  }).isRequired,\n};\nexport default LeftPanel;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledTable = styled.table`\n  width: 100%;\n`;\n\nconst StyledTd = styled.td`\n  padding: 5px 0;\n`;\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-top: 1px solid black;\n  border-bottom: 1px solid black;\n`;\n\nfunction TableForPresent({ data, choosePatient }) {\n  return (\n    <StyledTable>\n      <tbody>\n        <tr>\n          <th>№ ИБ</th>\n          <th>ФИО</th>\n          <th>ПАЛАТА</th>\n        </tr>\n        {data.map((item, index) => (\n          <StyledTr\n            key={item.historyNumber}\n            onClick={() => {\n              choosePatient(item);\n            }}\n          >\n            <StyledTd>{index + 1}</StyledTd>\n            <StyledTd>{item.firstName}</StyledTd>\n            <StyledTd>{item.bedNumber}</StyledTd>\n          </StyledTr>\n        ))}\n      </tbody>\n    </StyledTable>\n  );\n}\nTableForPresent.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  choosePatient: PropTypes.func.isRequired,\n};\nexport default TableForPresent;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledTable = styled.table`\n  width: 100%;\n`;\n\nconst StyledTd = styled.td`\n  padding: 5px 0;\n`;\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-top: 1px solid black;\n  border-bottom: 1px solid black;\n`;\n\nfunction TableForQuiting({ data, choosePatient }) {\n  return (\n    <StyledTable>\n      <tbody>\n        <tr>\n          <th>№ ИБ</th>\n          <th>ФИО</th>\n          <th>Причина выбытия</th>\n        </tr>\n        {data.map((item, index) => (\n          <StyledTr\n            key={item.historyNumber}\n            onClick={() => {\n              choosePatient(item);\n            }}\n          >\n            <StyledTd>{index + 1}</StyledTd>\n            <StyledTd>{item.firstName}</StyledTd>\n            <StyledTd>{item.cause}</StyledTd>\n          </StyledTr>\n        ))}\n      </tbody>\n    </StyledTable>\n  );\n}\n\nTableForQuiting.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  choosePatient: PropTypes.func.isRequired,\n};\nexport default TableForQuiting;\n","import React from 'react';\nimport axios from 'axios';\nimport { message, Tabs } from 'antd';\nimport styled from 'styled-components';\nimport LeftPanel from './components/LeftPanel';\nimport TableForPresent from './components/TableForPresent';\nimport TableForQuiting from './components/TableForQuiting';\n\nconst { TabPane } = Tabs;\n\nconst Wrapper = styled.div`\n  height: 100vh;\n  width: 100%;\n  padding: 15px;\n  display: flex;\n`;\n\nconst LeftPanelWrapper = styled.div`\n  border: 1px solid black;\n  padding: 5px;\n  width: 50%;\n  margin-right: 5px;\n`;\nconst RightPanelWrapper = styled.div`\n  border: 1px solid black;\n  padding: 5px;\n  width: 50%;\n  overflow: scroll;\n  overflow-x: hidden;\n  margin-left: 5px;\n`;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      active: {},\n      present: [],\n      quiting: [],\n    };\n  }\n\n  componentDidMount() {\n    this.loadMedData();\n  }\n\n  loadMedData = async () => {\n    const config = {\n      headers: { 'secret-key': '$2b$10$Rw3AI5quZuC5WnfhEFXFpuDYCf7Y/SOIGrtmnW2VZlCyQtvd6NxOO' },\n    };\n    try {\n      const present = await axios.get('https://api.jsonbin.io/b/5e624a7e763fa966d410fa1d', config);\n      this.setState({\n        present: present.data,\n      });\n    } catch (err) {\n      message.error('что-то пошло не так');\n      // eslint-disable-next-line no-console\n      console.log(err);\n    }\n    try {\n      const quiting = await axios.get('https://api.jsonbin.io/b/5e624ac4baf60366f0e4cd57', config);\n      this.setState({\n        quiting: quiting.data,\n      });\n    } catch (err) {\n      message.error('что-то пошло не так');\n      // eslint-disable-next-line no-console\n      console.log(err);\n    }\n  };\n\n  choosePatient = patient => {\n    this.setState({ active: patient });\n  };\n\n  render() {\n    const { present, quiting, active } = this.state;\n    return (\n      <Wrapper>\n        <LeftPanelWrapper>\n          <LeftPanel data={active} />\n        </LeftPanelWrapper>\n\n        <RightPanelWrapper>\n          <Tabs defaultActiveKey=\"1\">\n            <TabPane tab={`Присутствуют(${present.length})`} key=\"1\">\n              <TableForPresent data={present} choosePatient={this.choosePatient} />\n            </TabPane>\n            <TabPane tab={`Выбывшие(${quiting.length})`} key=\"2\">\n              <TableForQuiting data={quiting} choosePatient={this.choosePatient} />\n            </TabPane>\n          </Tabs>\n        </RightPanelWrapper>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}